{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["LineLogin","setIdToken","useEffect","callbackURL","query","url","Object","reqBody","grant_type","code","redirect_uri","client_id","client_secret","clientSecret","reqConfig","headers","axios","qs","res","setPayload","decodedIdToken","algorithms","audience","clientID","issuer","nonce","err","console","getAccessToken","window","className","styles","onClick","lineAuthoriseURL","response_type","state","scope","prompt","max_age","bot_prompt","lineLogin","App","useState","payload","idToken","log","ReactDOM","render","document","getElementById"],"mappings":"4mBASA,MAEaA,EAAY,EAAC,uDAMxBC,iBAwEAC,oBAAU,KA9CcC,KACtB,IACIC,EADWC,aAAf,GACA,MAEA,GADsBC,uCAAtB,QACqB,CACnB,MAAMC,EAAU,CACdC,WADc,qBAEdC,KAAML,EAFQ,KAGdM,aAHc,iCAIdC,UAJc,EAKdC,cAAeC,GAEXC,EAAY,CAChBC,QAAS,CACP,eAAgB,sCAGpBC,iDAGIC,cAHJD,WAMSE,IACL,GAAgBC,EAAWD,EAAXC,MAEhB,IACE,MAAMC,EAAiB,WAAWF,OAAX,WAA4C,CACjEG,WAAY,CADqD,SAEjEC,SAAUC,EAFuD,WAGjEC,OAHiE,yBAIjEC,MAAOA,IAGT,GAAgBxB,KAChB,MAAOyB,GAEPC,kBApBNX,MAuBUU,IACNC,mBAMNC,CAAeC,gBAAfD,QAIA,yBAAKE,UAAWC,GACd,yBAAKC,QAAS,IA5EA,MAEhB,MAaMC,EACJ,gDAdY,cAAsB,CAClCC,cADkC,OAElCvB,UAFkC,EAGlCwB,MAHkC,EAIlCC,MAJkC,uBAKlCX,MALkC,EAMlCY,OANkC,UAOlCC,QAnBN,IAoBMC,WAAY,WAMZ,+CAKFV,wBAuDsBW,GAAaV,UAAWC,M,OC5DnCU,MA9BH,KAAO,MAAD,EACcC,mBAAS,MADvB,mBACTC,EADS,KACAxB,EADA,OAEcuB,mBAAS,MAFvB,mBAETE,EAFS,KAEA3C,EAFA,KAchB,OACE,6BACE,kBAACD,EAAD,CACEuB,SAAS,GACTV,aAAa,GACbsB,MAAM,GACNV,MAAM,GACNN,WAAYA,EACZlB,WAAYA,IAEb0B,QAAQkB,IAAI,UAAWF,GACvBhB,QAAQkB,IAAI,UAAWD,KCxB9BE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d6c14400.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport styles from './styles.module.css'\n\nimport axios from 'axios'\nimport url from 'url'\nimport qs from 'qs'\nimport querystring from 'querystring'\nimport jwt from 'jsonwebtoken'\n\nconst maxAge = 120\n\nexport const LineLogin = ({\n  clientID,\n  clientSecret,\n  state,\n  nonce,\n  setPayload,\n  setIdToken\n}) => {\n  const lineLogin = () => {\n    // Build query string.\n    const query = querystring.stringify({\n      response_type: 'code',\n      client_id: clientID,\n      state: state,\n      scope: 'profile openid email',\n      nonce: nonce,\n      prompt: 'consent',\n      max_age: maxAge,\n      bot_prompt: 'normal'\n    })\n    // The Callback URL specify in the Line Developer Console.\n    const redirectURI = 'http://localhost:3000/callback'\n    // Build the Line authorise URL.\n    const lineAuthoriseURL =\n      'https://access.line.me/oauth2/v2.1/authorize?' +\n      query +\n      '&redirect_uri=' +\n      redirectURI\n    // Redirect to external URL.\n    window.location.href = lineAuthoriseURL\n  }\n\n  const getAccessToken = (callbackURL) => {\n    var urlParts = url.parse(callbackURL, true)\n    var query = urlParts.query\n    var hasCodeProperty = Object.prototype.hasOwnProperty.call(query, 'code')\n    if (hasCodeProperty) {\n      const reqBody = {\n        grant_type: 'authorization_code',\n        code: query.code,\n        redirect_uri: 'http://localhost:3000/callback',\n        client_id: clientID,\n        client_secret: clientSecret\n      }\n      const reqConfig = {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }\n      axios\n        .post(\n          'https://api.line.me/oauth2/v2.1/token',\n          qs.stringify(reqBody),\n          reqConfig\n        )\n        .then((res) => {\n          if (setPayload) setPayload(res.data)\n\n          try {\n            const decodedIdToken = jwt.verify(res.data.id_token, clientSecret, {\n              algorithms: ['HS256'],\n              audience: clientID.toString(),\n              issuer: 'https://access.line.me',\n              nonce: nonce\n            })\n\n            if (setIdToken) setIdToken(decodedIdToken)\n          } catch (err) {\n            // If token is invalid.\n            console.log(err)\n          }\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }\n\n  useEffect(() => {\n    getAccessToken(window.location.href)\n  })\n\n  return (\n    <div className={styles.App}>\n      <div onClick={() => lineLogin()} className={styles.lineButton} />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { LineLogin } from 'react-line-login'\nimport 'react-line-login/dist/index.css'\n\nconst App = () => {\n  const [payload, setPayload] = useState(null)\n  const [idToken, setIdToken] = useState(null)\n\n  /*\n  Example:\n    clientID='1868550780'\n    clientSecret='5256dfegwca9674c3d15193155a1e3f76c'\n    state='b41c8fd15b895f0fc28bf3b9d7da89054d931e7s'\n    nonce='d78a51235f6ee189e831q9c68523cfa336917ada'\n\n  recommend : save secret in .env\n  */\n\n  return (\n    <div>\n      <LineLogin\n        clientID=''\n        clientSecret=''\n        state=''\n        nonce=''\n        setPayload={setPayload}\n        setIdToken={setIdToken}\n      />\n      {console.log('payload', payload)}\n      {console.log('idToken', idToken)}\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}