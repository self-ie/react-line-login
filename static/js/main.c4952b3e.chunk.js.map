{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["LineLogin","redirectURI","useEffect","callbackURL","query","url","Object","reqBody","grant_type","code","redirect_uri","client_id","client_secret","clientSecret","reqConfig","headers","axios","qs","res","setPayload","decodedIdToken","algorithms","audience","clientID","issuer","nonce","setIdToken","err","console","getAccessToken","window","className","styles","onClick","lineAuthoriseURL","response_type","state","scope","prompt","max_age","bot_prompt","lineLogin","App","useState","payload","idToken","log","ReactDOM","render","document","getElementById"],"mappings":"gnBASA,MAEaA,EAAY,EAAC,4EAQxBC,kBAuEAC,oBAAU,KA/CcC,KACtB,IACIC,EADWC,aAAf,GACA,MAEA,GADsBC,uCAAtB,QACqB,CACnB,MAAMC,EAAU,CACdC,WADc,qBAEdC,KAAML,EAFQ,KAGdM,aAHc,EAIdC,UAJc,EAKdC,cAAeC,GAEXC,EAAY,CAChBC,QAAS,CACP,eAAgB,sCAIpBC,iDAGIC,cAHJD,WAMSE,IACL,GAAgBC,EAAWD,EAAXC,MAEhB,IACE,MAAMC,EAAiB,WAAWF,OAAX,WAA4C,CACjEG,WAAY,CADqD,SAEjEC,SAAUC,EAFuD,WAGjEC,OAHiE,yBAIjEC,MAAOA,IAGT,GAAgBC,KAChB,MAAOC,GAEPC,kBApBNZ,MAuBUW,IACNC,mBAMNC,CAAeC,gBAAfD,OACC,CAFH3B,IAKE,yBAAK6B,UAAWC,GACd,yBAAKC,QAAS,IA3EA,MAEhB,MAWMC,EACJ,gDAZY,cAAsB,CAClCC,cADkC,OAElCxB,UAFkC,EAGlCyB,MAHkC,EAIlCC,MAJkC,EAKlCZ,MALkC,EAMlCa,OANkC,UAOlCC,QArBN,IAsBMC,WAAY,WAIZ,iBADF,EAMAV,wBAwDsBW,GAAaV,UAAWC,M,OCvDnCU,MApCH,KAAO,MAAD,EACcC,mBAAS,MADvB,mBACTC,EADS,KACAzB,EADA,OAEcwB,mBAAS,MAFvB,mBAETE,EAFS,KAEAnB,EAFA,KAehB,OACE,6BACE,kBAAC1B,EAAD,CACEuB,SAAS,GACTV,aAAa,GACbuB,MAAM,GACNX,MAAM,GACNxB,YAAY,GACZoC,MAAM,GACNlB,WAAYA,EACZO,WAAYA,IAEbkB,GAAWC,EACVjB,QAAQkB,IAAI,UAAWF,EAAS,UAAWC,GAE3C,uCC7BRE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c4952b3e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './styles.module.css';\n\nimport axios from 'axios';\nimport url from 'url';\nimport qs from 'qs';\nimport querystring from 'querystring';\nimport jwt from 'jsonwebtoken';\n\nconst maxAge = 120;\n\nexport const LineLogin = ({\n  clientID,\n  clientSecret,\n  state,\n  nonce,\n  scope,\n  setPayload,\n  setIdToken,\n  redirectURI\n}) => {\n  const lineLogin = () => {\n    // Build query string.\n    const query = querystring.stringify({\n      response_type: 'code',\n      client_id: clientID,\n      state: state,\n      scope: scope,\n      nonce: nonce,\n      prompt: 'consent',\n      max_age: maxAge,\n      bot_prompt: 'normal'\n    });\n    // Build the Line authorise URL.\n    const lineAuthoriseURL =\n      'https://access.line.me/oauth2/v2.1/authorize?' +\n      query +\n      '&redirect_uri=' +\n      redirectURI;\n    // Redirect to external URL.\n    window.location.href = lineAuthoriseURL;\n  };\n\n  const getAccessToken = (callbackURL) => {\n    var urlParts = url.parse(callbackURL, true);\n    var query = urlParts.query;\n    var hasCodeProperty = Object.prototype.hasOwnProperty.call(query, 'code');\n    if (hasCodeProperty) {\n      const reqBody = {\n        grant_type: 'authorization_code',\n        code: query.code,\n        redirect_uri: redirectURI,\n        client_id: clientID,\n        client_secret: clientSecret\n      };\n      const reqConfig = {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      axios\n        .post(\n          'https://api.line.me/oauth2/v2.1/token',\n          qs.stringify(reqBody),\n          reqConfig\n        )\n        .then((res) => {\n          if (setPayload) setPayload(res.data);\n\n          try {\n            const decodedIdToken = jwt.verify(res.data.id_token, clientSecret, {\n              algorithms: ['HS256'],\n              audience: clientID.toString(),\n              issuer: 'https://access.line.me',\n              nonce: nonce\n            });\n\n            if (setIdToken) setIdToken(decodedIdToken);\n          } catch (err) {\n            // If token is invalid.\n            console.log(err);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  useEffect(() => {\n    getAccessToken(window.location.href);\n  }, [clientID]);\n\n  return (\n    <div className={styles.App}>\n      <div onClick={() => lineLogin()} className={styles.lineButton} />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { LineLogin } from 'reactjs-line-login';\nimport 'reactjs-line-login/dist/index.css';\n\nconst App = () => {\n  const [payload, setPayload] = useState(null);\n  const [idToken, setIdToken] = useState(null);\n\n  /*\n  Example:\n    clientID='1654553430'\n    clientSecret='deee1b60ae8de8658e214b67b25f6ec3'\n    state='b41c8fd15b895f0fc28bf3b9d7da89054d931e7s'\n    nonce='d78a51235f6ee189e831q9c68523cfa336917ada'\n    redirectURI='http://localhost:3000/callback\"\n    scope='profile openid email'\n  recommend : save secret in .env\n  */\n\n  return (\n    <div>\n      <LineLogin\n        clientID=''\n        clientSecret=''\n        state=''\n        nonce=''\n        redirectURI=''\n        scope=''\n        setPayload={setPayload}\n        setIdToken={setIdToken}\n      />\n      {payload && idToken ? (\n        console.log('payload', payload, 'idToken', idToken)\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}